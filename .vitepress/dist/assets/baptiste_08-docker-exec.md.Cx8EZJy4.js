import{_ as s,c as e,o as i,a2 as a}from"./chunks/framework.CEgrwLex.js";const g=JSON.parse('{"title":"Docker Exec","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/08-docker-exec.md","filePath":"baptiste/08-docker-exec.md"}'),n={name:"baptiste/08-docker-exec.md"},t=a(`<h1 id="docker-exec" tabindex="-1">Docker Exec <a class="header-anchor" href="#docker-exec" aria-label="Permalink to &quot;Docker Exec&quot;">‚Äã</a></h1><p>On l&#39;a vu pr√©c√©demment, les conteneurs sont en fait des sortes de machines virtuelles, qui ex√©cutent un syst√®me d&#39;exploitation Linux.</p><p>On va donc pouvoir <strong>s&#39;y connecter</strong> pour lancer des commandes !</p><p>Pour cela, on utilise la commande <code>docker exec</code>.</p><p>D√©marrons un nouveau conteneur PHP :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8002:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php:8.2-apache</span></span></code></pre></div><p>Une fois d√©marr√©, on peut utiliser la commande <code>docker exec</code> pour lancer une commande dans notre conteneur :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo &#39;&lt;?php phpinfo();&#39; &gt; /var/www/html/index.php&quot;</span></span></code></pre></div><p>La commande <code>bash -c &quot;echo &#39;&lt;?php phpinfo();&#39; &gt; /var/www/html/index.php&quot;</code> lanc√©e dans le conteneur <code>php-test</code> permet d&#39;ajouter le contenu <code>&lt;?php phpinfo();</code> dans le fichier <code>/var/www/html/index.php</code> du conteneur.</p><p>Ouvrez la page <a href="http://localhost:8002" target="_blank" rel="noreferrer">http://localhost:8002</a> dans votre navigateur, vous devriez voir la sortie de l&#39;instruction PHP <code>phpinfo()</code> (qui permet d&#39;avoir des informations sur notre installation de PHP).</p><p>Essayons de supprimer ce conteneur et de le relancer :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php-test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8002:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php:8.2-apache</span></span></code></pre></div><p>Si on actualise la page, on a une erreur <code>Forbidden</code> ... est-ce que vous savez d&#39;o√π vient cette erreur ?</p><details><summary>Solution</summary><p>Une image Docker est <strong>immuable</strong>, on ne peut pas la modifier. La modification qu&#39;on a effectu√© (cr√©er un fichier avec l&#39;instruction PHP <code>phpinfo()</code>) n&#39;√©tait donc que <strong>temporaire</strong>, elle existait seulement dans notre conteneur <code>php-test</code>, qui est une <strong>instance de notre image</strong>.</p><p>üí° Si on avait seulement stopp√© (<code>docker stop php-test</code>) puis relanc√© notre conteneur (<code>docker start php-test</code>), les modifications auraient √©t√© conserv√©es puisqu&#39;on utiliserait la <strong>m√™me instance (modifi√©e) de l&#39;image</strong>.</p></details><p>On verra par la suite comment faire <strong>persister des donn√©es de nos conteneurs</strong>, m√™me apr√®s leur suppression !</p><p>Avant √ßa, voyons comment lancer des commandes plus complexes √† l&#39;int√©rieur de nos conteneurs.</p><h2 id="ouvrir-un-terminal-interactif" tabindex="-1">Ouvrir un terminal interactif <a class="header-anchor" href="#ouvrir-un-terminal-interactif" aria-label="Permalink to &quot;Ouvrir un terminal interactif&quot;">‚Äã</a></h2><p>Pour lancer certaines commandes plus complexes dans un conteneur, ou un grand nombre de commandes √† la suite, la syntaxe vue pr√©c√©demment n&#39;est pas adapt√©e.</p><p>On va plut√¥t <strong>ouvrir un terminal interactif</strong> sur notre conteneur (gr√¢ce √† l&#39;argument <code>-it</code> !), un peu comme si on s&#39;y connectait en SSH !</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> php-test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>Une fois cette commande lanc√©e, le prompt va changer dans notre terminal ! Toutes les commandes qu&#39;on va lancer seront lanc√©es <strong>dans le conteneur</strong>.</p><p>Essayez diff√©rentes commandes, par exemple :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;?php phpinfo();&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.php</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span></code></pre></div><p>On peut par exemple installer Composer, avec les commandes utilis√©es hier :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;if (hash_file(&#39;sha384&#39;, &#39;composer-setup.php&#39;) === &#39;e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02&#39;) { echo &#39;Installer verified&#39;; } else { echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); } echo PHP_EOL;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer-setup.php</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unlink(&#39;composer-setup.php&#39;);&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer.phar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/composer</span></span></code></pre></div><p>üí° Seule la derni√®re commande diff√®re : pas besoin de <code>sudo</code>, on est d√©j√† connect√© en <code>root</code> dans le conteneur !</p><p>Derni√®re √©tape avant de pouvoir utiliser Composer, on doit installer un utilitaire pour d√©zipper dans notre conteneur ! Profitons-en √©galement pour installer l&#39;√©diteur de texte <code>nano</code>. Lancez les commandes suivantes :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nano</span></span></code></pre></div><p>On peut maintenant utiliser Composer pour installer des d√©pendances :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> symfony/var-dumper</span></span></code></pre></div><p>Si on lance la commande <code>ls</code>, on peut constater que le dossier <code>vendor</code> et les fichiers <code>composer.json</code> et <code>composer.lock</code> sont maintenant pr√©sents.</p><p>Modifions le contenu de notre fichier <code>index.php</code> avec <code>nano</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.php</span></span></code></pre></div><p>Remplacez le contenu de ce fichier par les instructions ci-dessous :</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">require</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vendor/autoload.php&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from symfony/var-dumper !&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Actualisez la page dans votre navigateur, vous devriez avoir voir le message affich√© gr√¢ce √† la d√©pendance <code>symfony/var-dumper</code>.</p><blockquote><p>C&#39;est pas pratique, on va pas se connecter et lancer toutes ces commandes √† chaque fois qu&#39;on lance notre conteneur !</p></blockquote><p>Pour √©viter √ßa, on va cr√©er nos propres images Docker personnalis√©es ! La suite dans le <a href="./09-dockerfile.html">prochain fichier</a>.</p>`,38),p=[t];function o(l,r,h,d,c,k){return i(),e("div",null,p)}const F=s(n,[["render",o]]);export{g as __pageData,F as default};

import{_ as e,c as t,o as a,a2 as i}from"./chunks/framework.TebtTzPX.js";const s="/assets/session.CFkoVBjN.png",n="/assets/token.FOf2Q5zB.png",k=JSON.parse('{"title":"Authentification","description":"","frontmatter":{},"headers":[],"relativePath":"cecile/E19_authentification.md","filePath":"cecile/E19_authentification.md"}'),r={name:"cecile/E19_authentification.md"},o=i(`<h1 id="authentification" tabindex="-1">Authentification <a class="header-anchor" href="#authentification" aria-label="Permalink to &quot;Authentification&quot;">‚Äã</a></h1><p><em>Login</em>, identification, connexion et autre <em>authentication</em></p><hr><h2 id="c-est-quoi-deja" tabindex="-1">C&#39;est quoi d√©j√† ? <a class="header-anchor" href="#c-est-quoi-deja" aria-label="Permalink to &quot;C&#39;est quoi d√©j√† ?&quot;">‚Äã</a></h2><h3 id="http-en-gros" tabindex="-1">HTTP en gros <a class="header-anchor" href="#http-en-gros" aria-label="Permalink to &quot;HTTP en gros&quot;">‚Äã</a></h3><ul><li>Le client demande, le serveur r√©pond</li></ul><p><em>Le client demande ce qu&#39;il veut, m√™me l&#39;addition du gars d&#39;√† c√¥t√© ?</em></p><ul><li>Pour des donn√©es sensibles le serveur voudra savoir qui l&#39;interroge, le plus souvent le client donnera un identifiant et un mot de passe, il s&#39;<strong>authentifie</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// requ√™te http avec identifiant et mot de passe avec axios</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:3001/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email: state.email,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    password: state.password,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="redemander-des-choses" tabindex="-1">Redemander des choses <a class="header-anchor" href="#redemander-des-choses" aria-label="Permalink to &quot;Redemander des choses&quot;">‚Äã</a></h3><ul><li>Il faut redonner l&#39;identifiant et le mot de passe √† chaque fois ?</li><li>Me semble qu&#39;on avait vu quelque chose ü§î</li></ul><h3 id="la-session" tabindex="-1">La session <a class="header-anchor" href="#la-session" aria-label="Permalink to &quot;La session&quot;">‚Äã</a></h3><p><img src="`+s+'" alt=""></p><h3 id="oui-mais" tabindex="-1">Oui... Mais <a class="header-anchor" href="#oui-mais" aria-label="Permalink to &quot;Oui... Mais&quot;">‚Äã</a></h3><ul><li>En cross origin (l&#39;api sur 1 domaine, le front sur 1 autre), g√©rer une session n√©cessite quelques adaptations</li><li>C&#39;est faisable, mais il existe une autre solution adapt√©e...</li></ul><hr><h2 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">‚Äã</a></h2><h3 id="le-principe" tabindex="-1">Le principe <a class="header-anchor" href="#le-principe" aria-label="Permalink to &quot;Le principe&quot;">‚Äã</a></h3><p>Les JWT (JSON Web Token) vont √™tre un moyen de m√©moriser notre identit√©, nous permettant par la suite de demander au serveur de nous autoriser l&#39;acc√®s √† certaines ressources.</p><p>Il s&#39;agit d&#39;un objet JSON qui nous sera attribu√© par le serveur apr√®s authentification. Il sera sign√© pour v√©rifier son int√©grit√©.</p><p>Le client s&#39;occupera de le garder et de le renvoyer √† chaque demande pour prouver son identit√© et ainsi obtenir l&#39;acc√®s √† telle ou telle ressource.</p><h3 id="un-petit-schema" tabindex="-1">Un petit sch√©ma ? <a class="header-anchor" href="#un-petit-schema" aria-label="Permalink to &quot;Un petit sch√©ma ?&quot;">‚Äã</a></h3><p><img src="'+n+'" alt=""></p><h3 id="ou-l-allegorie-du-concert" tabindex="-1">Ou l&#39;all√©gorie du concert ? <a class="header-anchor" href="#ou-l-allegorie-du-concert" aria-label="Permalink to &quot;Ou l&#39;all√©gorie du concert ?&quot;">‚Äã</a></h3><ul><li>Toto (le client) va au concert de Doroth√©e, c&#39;est un fan VIP</li></ul><ul><li>Il donne son nom et pr√©nom (authentification) au guichet (serveur), on lui donne un bracelet vert (son token) lui donnant droit au concert et aux coulisses</li></ul><ul><li>Il met son bracelet autour de son poignet (c&#39;est au client de m√©moriser son JWT)</li></ul><ul><li>Plus tard, il demande acc√®s aux coulisses et pr√©sente simplement son bracelet, il est autoris√© √† passer üéâ</li></ul><h3 id="compris" tabindex="-1">Compris ? <a class="header-anchor" href="#compris" aria-label="Permalink to &quot;Compris ?&quot;">‚Äã</a></h3><p><a href="https://jwt.io/introduction/" target="_blank" rel="noreferrer">Alors un peu de lecture pour plus de pr√©cisions</a></p><hr><h2 id="et-la-securite-la-dedans" tabindex="-1">Et la s√©curit√© l√†-dedans ? <a class="header-anchor" href="#et-la-securite-la-dedans" aria-label="Permalink to &quot;Et la s√©curit√© l√†-dedans ?&quot;">‚Äã</a></h2><ul><li>On va mettre dans le JWT un moyen de reconna√Ætre l&#39;utilisateur, par exemple son ID</li><li>Puisque le JWT poss√®de une signature d√©pendant de son contenu, c√¥t√© serveur on pourra v√©rifier qu&#39;il n&#39;a pas √©t√© modifi√©</li><li>Ainsi nos utilisateurs ne peuvent pas pr√©tendre √™tre quelqu&#39;un d&#39;autre</li></ul><p>A priori tout va bien, il convient tout de m√™me de <strong>comprendre</strong> quelques bonnes pratiques</p><h3 id="prendre-ses-precautions-lors-de-la-memorisation-du-jwt-cote-client" tabindex="-1">Prendre ses pr√©cautions lors de la m√©morisation du JWT c√¥t√© client <a class="header-anchor" href="#prendre-ses-precautions-lors-de-la-memorisation-du-jwt-cote-client" aria-label="Permalink to &quot;Prendre ses pr√©cautions lors de la m√©morisation du JWT c√¥t√© client&quot;">‚Äã</a></h3><p>3 possibilit√©s</p><ol><li>Stocker le JWT uniquement dans le state : simple et efficace mais il faut se reconnecter si on actualise la page</li></ol><p>C&#39;est la solution que nous allons utiliser</p><ol start="2"><li>Stocker le JWT en localStorage : on conserve en m√©moire le JWT</li></ol><p><a href="https://developer.mozilla.org/fr/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer">LocalStorage</a> est un moyen simple de m√©moriser dans le navigateur certaines donn√©es pour un site web donn√©.</p><p>Ces donn√©es sont accessibles via les scripts Javascript du domaine.</p><p>Comme pour toute donn√©e en m√©moire c√¥t√© client (<em>donc comme pour la solution 1</em>), si des failles <a href="https://owasp.org/www-community/attacks/xss/" target="_blank" rel="noreferrer">XSS</a> sont pr√©sentes sur notre application, les donn√©es du localStorage sont compromises<br> (<em>comme les mots de passe saisis via un formulaire par exemple</em>).</p><ol start="3"><li>Stocker le JWT dans un cookie : on conserve en m√©moire le JWT m√™me si on actualise, s√©curis√© sous certaines conditions</li></ol><ul><li>On doit utiliser l&#39;option <code>HttpOnly</code> lors de la cr√©ation du cookie pour le rendre inaccessible via les scripts</li><li>On doit mettre en place des jetons de protections contre les <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#csrf" target="_blank" rel="noreferrer">CSRF</a></li></ul><p>Cette solution est cool, mais plus compliqu√©e que la premi√®re √† mettre en place.</p><h3 id="utiliser-https-en-production" tabindex="-1">Utiliser HTTPS en production <a class="header-anchor" href="#utiliser-https-en-production" aria-label="Permalink to &quot;Utiliser HTTPS en production&quot;">‚Äã</a></h3><p>HTTPS vise √† prot√©ger la confidentialit√© des donn√©es √©chang√©es entre le client et le serveur</p><ul><li><a href="https://howhttps.works/" target="_blank" rel="noreferrer">En images</a></li><li><a href="https://certbot.eff.org/" target="_blank" rel="noreferrer">Un outil pratique pour le mettre en place : Certbot</a></li></ul><p><em>De mani√®re g√©n√©rale, pour n&#39;importe quel syst√®me d&#39;authentification o√π l&#39;on √©change des donn√©es sensibles, on doit s√©curiser les communications client/serveur en production</em></p>',49),l=[o];function u(c,d,p,h,m,f){return a(),t("div",null,l)}const b=e(r,[["render",u]]);export{k as __pageData,b as default};

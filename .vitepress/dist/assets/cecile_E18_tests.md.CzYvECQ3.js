import{_ as e,c as t,o as i,a2 as a}from"./chunks/framework.CEgrwLex.js";const s="/assets/tdd.D0fzDadL.png",q=JSON.parse('{"title":"Tests","description":"","frontmatter":{},"headers":[],"relativePath":"cecile/E18_tests.md","filePath":"cecile/E18_tests.md"}'),l={name:"cecile/E18_tests.md"},r=a('<h1 id="tests" tabindex="-1">Tests <a class="header-anchor" href="#tests" aria-label="Permalink to &quot;Tests&quot;">‚Äã</a></h1><p>D√©couvrons les principes associ√©s aux tests.</p><hr><h2 id="ecrire-du-code-c-est" tabindex="-1">√âcrire du code c&#39;est... <a class="header-anchor" href="#ecrire-du-code-c-est" aria-label="Permalink to &quot;√âcrire du code c&#39;est...&quot;">‚Äã</a></h2><h3 id="refactoriser" tabindex="-1">Refactoriser <a class="header-anchor" href="#refactoriser" aria-label="Permalink to &quot;Refactoriser&quot;">‚Äã</a></h3><p>Quand on √©crit du code, on cherche tout le temps √†</p><ul><li>l&#39;am√©liorer</li><li>le rendre plus efficace</li><li>le rendre plus &quot;√©l√©gant&quot;</li></ul><h3 id="affronter-des-regressions" tabindex="-1">Affronter des r√©gressions <a class="header-anchor" href="#affronter-des-regressions" aria-label="Permalink to &quot;Affronter des r√©gressions&quot;">‚Äã</a></h3><p>Mais, quand on √©crit du code, on le fait parfois r√©gresser</p><ul><li>une fonctionnalit√© se comporte autrement</li><li>un bout de code renvoie une nouvelle erreur</li><li>une am√©lioration casse l&#39;application</li></ul><h3 id="changer-de-lib-de-structure" tabindex="-1">Changer de lib / de structure <a class="header-anchor" href="#changer-de-lib-de-structure" aria-label="Permalink to &quot;Changer de lib / de structure&quot;">‚Äã</a></h3><p>Il arrive fr√©quemment de changer d&#39;outil, de biblioth√®que ou de faire √©voluer du code &quot;legacy&quot;</p><ul><li>Changer une lib par une nouvelle <ul><li>plus rapide</li><li>plus puissante</li><li>plus √©l√©gante</li><li>...plus hype ?? ...on n&#39;a pas toujours le choix</li></ul></li><li>Toucher √† un code legacy <ul><li>non maintenu</li><li>non test√©</li><li>non comment√©</li><li>...personne ne veut y aller üòÆ</li></ul></li></ul><h3 id="constat" tabindex="-1">Constat <a class="header-anchor" href="#constat" aria-label="Permalink to &quot;Constat&quot;">‚Äã</a></h3><p>Quand on √©crit du code, il y a toujours des bugs</p><ul><li>m√™me si on est super fort,</li><li>qu&#39;on a fait tr√®s attention,</li><li>qu&#39;on est dans une √©quipe de &quot;brutes&quot;,</li><li>qu&#39;on peut lire la matrice sans d√©codeur...</li></ul><blockquote><p>TOUJOURS</p></blockquote><hr><h2 id="test" tabindex="-1">Test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;Test&quot;">‚Äã</a></h2><h3 id="kezako" tabindex="-1">K√©zako ? <a class="header-anchor" href="#kezako" aria-label="Permalink to &quot;K√©zako ?&quot;">‚Äã</a></h3><p>Les tests... vous connaissez d√©j√†.</p><p>Si je vous dis &quot;parcours&quot;...</p><p>Un test, c&#39;est du code qui ex√©cute du code afin de v√©rifier si le r√©sultat obtenu est bien celui attendu (valeur de retour, types attendus, ...)</p><p>Par exemple : &quot;v√©rifier si <code>sum(3, 5)</code> retourne bien <code>8</code>&quot;. On cherche √† v√©rifier si cette assertion est bel et bien vraie.</p><h3 id="a-quoi-ca-sert" tabindex="-1">√Ä quoi √ßa sert <a class="header-anchor" href="#a-quoi-ca-sert" aria-label="Permalink to &quot;√Ä quoi √ßa sert&quot;">‚Äã</a></h3><ul><li>v√©rifier que le code fonctionne comme attendu et pour tous les cas</li><li>d√©couvrir les bugs le plus t√¥t possible</li><li>stabiliser le code, emp√™cher les r√©gressions, faire √©voluer et am√©liorer le code</li><li>pouvoir r√©√©crire le code en changeant de biblioth√®que, d&#39;organisation des fichiers</li><li>am√©liorer le code petit √† petit <ul><li>on voit un bug,</li><li>on √©crit un test qui reproduit le bug,</li><li>on corrige le bug,</li><li>on rajoute un test pour s&#39;assurer que ce bug ne reviendra plus üòâ</li></ul></li></ul><h3 id="types-de-tests" tabindex="-1">Types de tests <a class="header-anchor" href="#types-de-tests" aria-label="Permalink to &quot;Types de tests&quot;">‚Äã</a></h3><p>Selon la classification officielle du <a href="http://www.cftl.fr/" target="_blank" rel="noreferrer">Comit√© fran√ßais du test logiciel</a>, il existe 4 niveaux de test :</p><ul><li>Test unitaire <ul><li>on teste une unit√© de code, une partie pr√©cise du code (une fonction, un composant)</li></ul></li><li>Test d&#39;int√©gration <ul><li>on teste l&#39;assemblage de plusieurs parties de code, par exemple back-end + front-end</li></ul></li><li>Test syst√®me ou test fonctionnel <ul><li>on teste la conformit√© du syst√®me</li><li>Exemples : test UI / IHM, test de performance / benchmark, test de charge, ...</li></ul></li><li>Test d&#39;acceptation <ul><li>on teste le projet avec le client pour s&#39;assurer que tout soit conforme aux attentes / exigences</li></ul></li></ul><h3 id="euh-ca-fait-beaucoup-quand-meme" tabindex="-1">euh... √ßa fait beaucoup quand m√™me <a class="header-anchor" href="#euh-ca-fait-beaucoup-quand-meme" aria-label="Permalink to &quot;euh... √ßa fait beaucoup quand m√™me&quot;">‚Äã</a></h3><p>Oui √ßa fait beaucoup de tests possibles</p><p>Dans une entreprise, il peut y avoir des personnes d√©di√©es √† chaque niveau de test (d√©veloppeur ou non).</p><blockquote><p>Nous allons nous concentrer sur les tests unitaires</p></blockquote><hr><h2 id="test-unitaire" tabindex="-1">Test unitaire <a class="header-anchor" href="#test-unitaire" aria-label="Permalink to &quot;Test unitaire&quot;">‚Äã</a></h2><h3 id="tester-une-unite" tabindex="-1">Tester une unit√© <a class="header-anchor" href="#tester-une-unite" aria-label="Permalink to &quot;Tester une unit√©&quot;">‚Äã</a></h3><ul><li>une fonction</li><li>un composant</li><li>un fragment du programme</li></ul><p>Le principe est de tester pendant que l&#39;on code ou d√®s que le fragment de code est fonctionnel. L&#39;id√©e √©tant de limiter les r√©gressions.</p><p>Ces tests sont rapides √† ex√©cuter et suffisament nombreux pour pr√©voir les diff√©rents cas de figures.</p><h3 id="outils" tabindex="-1">Outils <a class="header-anchor" href="#outils" aria-label="Permalink to &quot;Outils&quot;">‚Äã</a></h3><p>Pour ex√©cuter les tests, on utilise certains outils pour cadrer le travail et avoir une uniformit√©.</p><blockquote><p>un <code>if</code> √ßa suffit pas ?</p></blockquote><p>En soi, c&#39;est suffisant mais difficile de d√©crire ce que le test va vraiment v√©rifier.</p><p>On va utiliser un <code>test runner</code>, organiser nos tests et y faire des <code>assertion</code>s</p><hr><h2 id="quand-ecrire-les-tests-d-une-application" tabindex="-1">Quand √©crire les tests d&#39;une application ? <a class="header-anchor" href="#quand-ecrire-les-tests-d-une-application" aria-label="Permalink to &quot;Quand √©crire les tests d&#39;une application ?&quot;">‚Äã</a></h2><h3 id="les-tests-durant-le-developpement" tabindex="-1">Les tests durant le d√©veloppement <a class="header-anchor" href="#les-tests-durant-le-developpement" aria-label="Permalink to &quot;Les tests durant le d√©veloppement&quot;">‚Äã</a></h3><ul><li>simplifie le travail du d√©veloppeur <ul><li>limite les r√©gressions et donc le besoin de debugguer le code</li></ul></li><li>fait gagner du temps par la suite <ul><li>il faut trois jours pour trouver la ligne de code qui pose probl√®me</li></ul></li><li>Plus on √©crit les tests t√¥t au cours du d√©veloppement et mieux c&#39;est : <ul><li>un bon compromis est d&#39;√©crire les tests d&#39;une fonction ou d&#39;un composant juste apr√®s l&#39;avoir √©crit</li></ul></li></ul><blockquote><p>avoir des tests seulement pour les fonctions cruciales, c&#39;est mieux que pas de tests du tout</p></blockquote><h3 id="les-tests-a-la-fin-du-dev" tabindex="-1">Les tests √† la fin du dev ? <a class="header-anchor" href="#les-tests-a-la-fin-du-dev" aria-label="Permalink to &quot;Les tests √† la fin du dev ?&quot;">‚Äã</a></h3><p>Si on √©crit les tests seulement apr√®s avoir fini de coder l&#39;application, on risque :</p><ul><li>d&#39;avoir du mal √† tester certaines parties (mauvais d√©coupage du code, fonction qui fait trop de choses), et √ßa prendrait du temps de corriger</li><li>de tomber sur des bugs √©normes qui nous obligent √† changer l&#39;architecture de l&#39;application =&gt; il va falloir r√©√©crire beaucoup plus de code que si on avait vu le probl√®me plus t√¥t</li></ul><hr><h1 id="allons-essayer" tabindex="-1">Allons essayer <a class="header-anchor" href="#allons-essayer" aria-label="Permalink to &quot;Allons essayer&quot;">‚Äã</a></h1><hr><h2 id="tdd" tabindex="-1">TDD <a class="header-anchor" href="#tdd" aria-label="Permalink to &quot;TDD&quot;">‚Äã</a></h2><h3 id="tdd-ca-veut-dire-quoi" tabindex="-1">TDD, √ßa veut dire quoi <a class="header-anchor" href="#tdd-ca-veut-dire-quoi" aria-label="Permalink to &quot;TDD, √ßa veut dire quoi&quot;">‚Äã</a></h3><p>Test Driven Development / D√©veloppement pilot√© par les tests</p><p>Concr√®tement, les tests sont √©crits <strong>avant</strong> le code, et le code devra s&#39;y conformer</p><p>Un cycle assez √©trange √† premi√®re vue mais...</p><h3 id="avantages" tabindex="-1">Avantages <a class="header-anchor" href="#avantages" aria-label="Permalink to &quot;Avantages&quot;">‚Äã</a></h3><ul><li>√† un instant donn√©, on sait que tout le code fonctionne</li><li>il n&#39;y a pas de code non test√© dans l&#39;application finie</li><li>Efficacit√© : on √©crit seulement le code dont on a besoin pour la fonctionnalit√© en cours</li><li>Point de d√©part : on d√©finit les contours √† l&#39;avance en √©crivant le test</li><li>Maintenance facilit√©e : pas de code inutile dans l&#39;application</li></ul><h3 id="cycle-tdd" tabindex="-1">Cycle TDD <a class="header-anchor" href="#cycle-tdd" aria-label="Permalink to &quot;Cycle TDD&quot;">‚Äã</a></h3><p><img src="'+s+'" alt=""></p><h3 id="_3-lois" tabindex="-1">3 lois <a class="header-anchor" href="#_3-lois" aria-label="Permalink to &quot;3 lois&quot;">‚Äã</a></h3><ul><li>1 : Vous devez √©crire un test qui √©choue avant de pouvoir √©crire le code de production correspondant. <ul><li>on n&#39;√©crit pas de code sans avoir √©crit un test avant, ce test permettra de v√©rifier que le code fonctionne</li></ul></li><li>2 : Vous devez √©crire une seule assertion √† la fois, qui fait √©chouer le test ou qui √©choue √† la compilation (ou erreur de syntaxe en Javascript). <ul><li>on √©crit les tests un par un, on n&#39;√©crit pas d&#39;un coup tous les tests n√©cessaires</li></ul></li><li>3 : Vous devez √©crire le minimum de code de production pour que l&#39;assertion du test actuellement en √©chec soit satisfaite. <ul><li>on se concentre sur &quot;faire passer le test qu&#39;on vient d&#39;√©crire&quot;, on ne code pas autre chose ailleurs</li></ul></li></ul><h3 id="le-tdd-en-pratique" tabindex="-1">Le TDD en pratique <a class="header-anchor" href="#le-tdd-en-pratique" aria-label="Permalink to &quot;Le TDD en pratique&quot;">‚Äã</a></h3><p>Le v√©ritable TDD est rare</p><ul><li>impression de perte de temps car √©norm√©ment de tests √† √©crire,</li><li>sp√©cifications pas toujours suffisamment claires,</li><li>processus de d√©veloppement qui peut para√Ætre p√©nible.</li></ul>',69),o=[r];function n(u,d,c,p,h,f){return i(),t("div",null,o)}const b=e(l,[["render",n]]);export{q as __pageData,b as default};

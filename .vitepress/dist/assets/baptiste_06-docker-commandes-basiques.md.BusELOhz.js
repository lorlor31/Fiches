import{_ as s,c as e,o as i,a2 as a}from"./chunks/framework.CEgrwLex.js";const F=JSON.parse('{"title":"Docker : Commandes de base","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/06-docker-commandes-basiques.md","filePath":"baptiste/06-docker-commandes-basiques.md"}'),n={name:"baptiste/06-docker-commandes-basiques.md"},t=a(`<h1 id="docker-commandes-de-base" tabindex="-1">Docker : Commandes de base <a class="header-anchor" href="#docker-commandes-de-base" aria-label="Permalink to &quot;Docker : Commandes de base&quot;">‚Äã</a></h1><p>Docker dispose d&#39;un <strong>tr√®s grand nombre de commandes</strong> qui permettent de d√©marrer, stopper, supprimer des conteneurs, voir les conteneurs qui sont en cours d&#39;ex√©cution, de g√©rer les images disponibles localement, etc.</p><p><strong>Pas de panique !</strong> Comme souvent, il est inutile d&#39;essayer de retenir toutes ces commandes par coeur, on peut les retrouver rapidement sur Internet.</p><p>La documentation officielle liste toute les commandes disponibles : <a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/commandline/cli/</a>.</p><p>Ce fichier MarkDown va vous faire d√©couvrir les commandes &quot;principales&quot; et fonctionnalit√©s de base de Docker par la pratique.</p><h2 id="demarrer-un-conteneur" tabindex="-1">D√©marrer un conteneur <a class="header-anchor" href="#demarrer-un-conteneur" aria-label="Permalink to &quot;D√©marrer un conteneur&quot;">‚Äã</a></h2><p><strong>Un conteneur est l&#39;instance d&#39;une image</strong>, donc pour d√©marrer un conteneur on va devoir pr√©ciser dans la commande <strong>quelle image on veut utiliser</strong>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello-world</span></span></code></pre></div><p>üí° Toutes les commandes Docker commen√ßent par le mot-cl√© <code>docker</code>.</p><p>La commande <code>docker run</code> permet de <strong>d√©marrer un conteneur avec l&#39;image fournie en argument</strong>, ici l&#39;image officielle <code>hello-world</code>.</p><p>üîó <a href="https://hub.docker.com/_/hello-world" target="_blank" rel="noreferrer">D√©p√¥t de l&#39;image sur le DockerHub</a></p><p>Si on observe attentivement les premi√®res lignes qui sont apparues dans la console, on peut voir le message d&#39;information <code>Unable to find image &#39;hello-world:latest&#39; locally</code>, suivi de <code>latest: Pulling from library/hello-world</code>.</p><p>Ce message nous indique que nous ne disposions pas d&#39;une copie de cette image en local. Docker l&#39;a donc t√©l√©charg√©e depuis le d√©p√¥t DockerHub.</p><p>Dans <code>hello-world:latest</code>, le mot cl√© <code>lastest</code> fait r√©f√©rence au <strong>tag de l&#39;image</strong>. Ce <strong>tag</strong> est une sorte de <strong>version de l&#39;image</strong>. Les diff√©rents tags disponibles sont list√©s sur le d√©p√¥t de l&#39;image sur le DockerHub, et on peut choisir de d√©marrer sur un conteneur une image avec un tag sp√©cifique avec la commande <code>docker run image:tag</code>.</p><p>Essayons de d√©marrer un conteneur avec une image un peu plus utile :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p><code>httpd</code> est le nom de l&#39;image officielle du serveur web Apache.</p><p>Contrairement √† l&#39;image <code>hello-world</code>, quand on d√©marre un conteneur avec l&#39;image d&#39;Apache <strong>le terminal reste bloqu√©</strong> apr√®s l&#39;affichage de quelques messages de debug.</p><blockquote><p>Comment √ßa se fait ? √áa y est, c&#39;est d√©j√† en panne ? ü§î</p></blockquote><p><strong>C&#39;est tout √† fait normal</strong>. L&#39;image <code>hello-world</code> √©tait pr√©vue pour stopper le conteneur apr√®s l&#39;affichage de quelques messages d&#39;information. Or, un serveur Apache, c&#39;est plut√¥t pens√© pour fonctionner en permanence, le conteneur reste donc en fonctionnement dans notre terminal.</p><p>On va donc en g√©n√©ral lancer nos conteneurs <strong>en t√¢che de fond</strong> ! Pour cela, on ajoute l&#39;argument <code>-d</code> (detached) √† la commande <code>docker run</code>.</p><p>Stoppez le conteneur avec le raccourci <code>Ctrl+C</code> puis relancez-le :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>Ce coup-ci, seule une suite de caract√®res alphanum√©rique est apparu dans le terminal, et on a r√©cup√©r√© directement notre prompt ensuite.</p><blockquote><p>Le conteneur s&#39;est arr√™t√© ? üßê</p></blockquote><p>Non ! Il tourne en <strong>t√¢che de fond</strong>, et on va voir par la suite comment interragir avec.</p><h2 id="gestion-des-conteneurs-demarres" tabindex="-1">Gestion des conteneurs d√©marr√©s <a class="header-anchor" href="#gestion-des-conteneurs-demarres" aria-label="Permalink to &quot;Gestion des conteneurs d√©marr√©s&quot;">‚Äã</a></h2><p>On peut visualiser les conteneurs actuellement d√©marr√©s avec la commande <code>docker ps</code>.</p><p>Cette commande nous retourne une sorte de tableau, avec plusieurs colonnes et une ligne par conteneur d√©marr√© :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7f026a118c8b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   80/tcp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    brave_torvalds</span></span></code></pre></div><p>Parmi les informations disponibles, on retrouve pour chaque conteneur un <strong>ID</strong>, le nom de l&#39;image utilis√©e, le status du conteneur et son heure de cr√©ation, <strong>les ports potentiellement expos√©s</strong> (on y reviendra par la suite), et le <strong>nom du conteneur</strong>, ici <code>brave_torvalds</code>, attribu√© al√©atoirement.</p><p>On peut stopper un conteneur avec la commande <code>docker stop</code>, suivie de l&#39;<strong>ID du conteneur</strong> ou de <strong>son nom</strong> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 7f026a118c8b</span></span></code></pre></div><p>Pour √©viter que Docker attribue un nom al√©atoirement √† nos conteneurs, on peut sp√©cifier le nom d√©sir√© en ajoutant l&#39;argument <code>--name</code> √† la commande <code>docker run</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>Si on relance <code>docker ps</code>, on peut constater que notre nouveau conteneur s&#39;appelle bien <code>apache</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c81b65c84995</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   80/tcp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    apache</span></span></code></pre></div><h2 id="redirections-de-ports" tabindex="-1">Redirections de ports <a class="header-anchor" href="#redirections-de-ports" aria-label="Permalink to &quot;Redirections de ports&quot;">‚Äã</a></h2><p>On a donc d√©marr√© un conteneur avec l&#39;image <code>httpd</code>, mais comment on fait pour <strong>acc√©der √† ce serveur</strong> ?</p><p>La commande <code>docker ps</code> nous indique que le conteneur <strong>expose son port 80</strong> : on va donc pouvoir acc√©der √† notre serveur par ce port ! Le probl√®me c&#39;est que par d√©faut, <strong>Docker isole chaque conteneur dans un sous-r√©seau</strong> : les conteneurs ont acc√®s √† internet, mais depuis internet ou notre ordinateur, impossible de communiquer avec les conteneurs.</p><p>Pour rendre le port 80 de notre conteneur accessible, nous allons devoir dire √† Docker de faire <strong>une redirection de port</strong>. Pour cela, on ajoute l&#39;argument <code>-p</code> √† la commande <code>docker run</code>. On va donc stopper notre conteneur Apache et le relancer.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><p>Puis on essaye de le relancer avec l&#39;argument <code>-p</code>, suivi de deux ports, s√©par√©s par le caract√®re <code>:</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>üí° <code>-p 8000:80</code> permet de demander √† Docker de <strong>rediriger le port 8000 de l&#39;ordinateur h√¥te vers le port 80 du conteneur</strong>. Le port 8000 doit √™tre disponible sur notre machine.</p><p>‚ö†Ô∏è Au moment de lancer cette derni√®re commande, vous devriez avoir une erreur indiquant : <code>docker: Error response from daemon: Conflict. The container name &quot;/apache&quot; is already in use</code>. En effet, on a stopp√© notre conteneur nomm√© <code>apache</code>, mais on ne l&#39;a pas d√©finitivement supprim√©. Docker nous indique donc que le nom est d√©j√† pris ! On verra comment r√©soudre ce probl√®me par la suite, pour l&#39;instant utilisons le nom <code>apache2</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>Ouvrez un navigateur est rendez-vous √† l&#39;adresse <a href="http://localhost:8000/" target="_blank" rel="noreferrer">http://localhost:8000/</a>, vous devriez voir la page <code>It works!</code> par d√©faut du serveur Apache.</p><p>üí° Il est possible de &quot;grouper&quot; certains arguments de nos commandes Docker ! On regroupe souvent <code>-d</code> et <code>-p</code> ensemble, ce qui donne : <code>docker run -dp 8000:80 ...</code>.</p><h2 id="supprimer-un-conteneur" tabindex="-1">Supprimer un conteneur <a class="header-anchor" href="#supprimer-un-conteneur" aria-label="Permalink to &quot;Supprimer un conteneur&quot;">‚Äã</a></h2><p>Stoppons notre deuxi√®me conteneur, normalement nomm√© <code>apache2</code> si vous avez bien suivi üòâ</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache2</span></span></code></pre></div><p>Pour voir les conteneurs stopp√©s, on peut rajouter l&#39;argument <code>-a</code> √† la commande <code>docker ps</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p>Vous devriez obtenir une liste avec tous les conteneurs que nous avons d√©marr√© depuis le d√©but de nos tests :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONTAINER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          STATUS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                          PORTS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     NAMES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d67af45f265a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       21</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) About a minute ago             apache2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c81b65c84995</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       24</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 21 minutes ago                 apache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">56d3fcacad6a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       29</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 29 minutes ago                 boring_curie</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7f026a118c8b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         &quot;httpd-foreground&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       40</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 38 minutes ago                 brave_torvalds</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">66742f0b69e5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;/hello&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 45</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minutes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Exited</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0) 43 minutes ago                 priceless_montalcini</span></span></code></pre></div><p>Pour supprimer un conteneur, on utilise la commande <code>docker rm</code> suivie du nom ou de l&#39;ID du conteneur.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><p>On peut m√™me supprimer plusieurs conteneurs d&#39;un seul coup :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> boring_curie</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> brave_torvalds</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> priceless_montalcini</span></span></code></pre></div><p>‚ö†Ô∏è Attention, les noms <code>boring_curie</code>, <code>brave_torvalds</code> et <code>priceless_montalcini</code> n&#39;existent que sur ma machine ! Pensez √† les remplacer par le nom de <strong>vos</strong> conteneurs !</p><p>On peut √©galement <strong>supprimer tous les conteneurs stopp√©s</strong> avec la commande <code>docker container prune</code>.</p><p>On peut maintenant r√©utiliser le nom <code>apache</code> pour notre conteneur !</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><blockquote><p>Et que ce passe-t-il si on essaye de supprimer un conteneur qui n&#39;a pas √©t√© stopp√© au pr√©alable ?</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><p>Si vous avez r√©pondu &quot;une erreur !&quot;, bravo, c&#39;est bien √ßa : <code>Error response from daemon: You cannot remove a running container. Stop the container before attempting removal or force remove</code>.</p><p>Il faut stopper un conteneur avant de pouvoir le supprimer, ou alors on peut forcer la suppression en rajoutant l&#39;argument <code>-f</code> √† la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><p>üí° Quand on veut stopper un conteneur, on ne pr√©voit pas forc√©ment de le relancer ensuite. On utilise donc souvent la commande ci-dessus pour <strong>stopper et supprimer un conteneur en une seule commande</strong>.</p><h2 id="relancer-un-conteneur-stoppe" tabindex="-1">Relancer un conteneur stopp√© <a class="header-anchor" href="#relancer-un-conteneur-stoppe" aria-label="Permalink to &quot;Relancer un conteneur stopp√©&quot;">‚Äã</a></h2><p>Red√©marrons un conteneur <code>apache</code> et stoppons-le :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><p>On peut maintenant le relancer avec la commande <code>docker start</code>, suivie de son ID ou de son nom :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span></code></pre></div><h2 id="gestion-des-images" tabindex="-1">Gestion des images <a class="header-anchor" href="#gestion-des-images" aria-label="Permalink to &quot;Gestion des images&quot;">‚Äã</a></h2><p>On l&#39;a vu, quand on lance un conteneur avec une image que l&#39;on a jamais utilis√© auparavant, celle-ci est t√©l√©charg√©e depuis le DockerHub. On peut ensuite d√©marrer plusieurs conteneurs √† partir de cette image sans avoir √† la t√©l√©charger √† nouveau.</p><p>Pour voir les images stock√©es localement, on peut utiliser la commande <code>docker images</code> ou <code>docker image ls</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REPOSITORY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                              TAG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       CREATED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">httpd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                   latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            75a48b16cd56</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> days</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     168MB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello-world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            9c7a54a9a43c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> months</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ago</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   13.3kB</span></span></code></pre></div><p>‚ö†Ô∏è De votre cot√©, les dates de cr√©ation seront diff√©rentes.</p><p>Bien que plus l√©g√®res que des disques dur de machines virtuelles, les images utilis√©es par nos conteneurs prennent de la place (presque 200Mo pour l&#39;image d&#39;Apache !), et il faut <strong>penser √† supprimer les images inutilis√©es pour en lib√©rer</strong>.</p><p>On peut supprimer une image avec la commande <code>docker image rm</code> suivi du nom de l&#39;image √† supprimer :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>‚ö†Ô∏è Cette commande devrait vous retourner un message d&#39;erreur <code>Error response from daemon: conflict: unable to remove repository reference &quot;httpd&quot; (must force)</code>, c&#39;est normal : l&#39;image est actuellement utilis√©e par notre conteneur <code>apache</code>.</p><p>Il faut au pr√©alable stopper <strong>et supprimer</strong> tous les conteneurs qui ont √©t√© d√©marr√©s √† partir d&#39;une image avant de pouvoir la supprimer.</p><p>On peut donc stopper et supprimer notre conteneur <code>apache</code> puis supprimer l&#39;image <code>httpd</code> avec les commandes suivantes :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> httpd</span></span></code></pre></div><p>üí° On peut <strong>supprimer toutes les images inutilis√©es</strong> avec la commande <code>docker image prune -a</code>.</p><h2 id="la-suite" tabindex="-1">La suite ? <a class="header-anchor" href="#la-suite" aria-label="Permalink to &quot;La suite ?&quot;">‚Äã</a></h2><p>On sait maintenant d√©marrer et arr√™ter des conteneurs et supprimer des images. On a pratiqu√© sur l&#39;image <code>httpd</code>, qui embarque le server web Apache, mais on a juste vu la page par d√©faut !</p><p>Et si on essayait de faire fonctionner notre front dans un conteneur Docker ?</p><blockquote><p>Il faut qu&#39;on utilise un Dockerfile pour construire notre propre image, c&#39;est √ßa ?</p></blockquote><p>On pourrait effectivement faire comme √ßa, mais on verra √ßa demain. En attendant, on va d√©couvrir les <code>bind mounts</code>, &quot;points de montage&quot; en Fran√ßais, qui vont nous permettre de &quot;monter&quot; un dossier contenant notre code √† l&#39;int√©rieur du conteneur !</p><p>√áa se passe par <a href="./07-docker-bind-mounts.html">ici</a> !</p>`,94),p=[t];function r(o,l,h,d,c,k){return i(),e("div",null,p)}const g=s(n,[["render",r]]);export{F as __pageData,g as default};

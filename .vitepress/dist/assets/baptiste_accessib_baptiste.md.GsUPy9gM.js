import{_ as e,c as t,o as i,a2 as l}from"./chunks/framework.CEgrwLex.js";const q=JSON.parse('{"title":"Accessibilité : les points essentiels à retenir","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/accessib_baptiste.md","filePath":"baptiste/accessib_baptiste.md"}'),a={name:"baptiste/accessib_baptiste.md"},s=l('<h1 id="accessibilite-les-points-essentiels-a-retenir" tabindex="-1">Accessibilité : les points essentiels à retenir <a class="header-anchor" href="#accessibilite-les-points-essentiels-a-retenir" aria-label="Permalink to &quot;Accessibilité : les points essentiels à retenir&quot;">​</a></h1><h2 id="structure-de-page-et-semantique" tabindex="-1">Structure de page et sémantique <a class="header-anchor" href="#structure-de-page-et-semantique" aria-label="Permalink to &quot;Structure de page et sémantique&quot;">​</a></h2><ul><li>Mettre en place une structure de titres (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>...) logique et complète.</li><li>Structurer les zones de la page avec les bonnes balises et les attributs role associés (<code>&lt;header role=&quot;banner&quot;&gt;</code>, etc.).</li><li>Penser au <code>DOCTYPE</code>.</li><li>Indiquer la langue principale de la page avec l&#39;attribut lang sur la balise <code>&lt;html&gt;</code>.</li><li>Indiquer les changements de langue avec l&#39;attribut lang sur les balises qui contiennent des textes qui ne sont pas dans la langue principale.</li><li>Mettre un <code>&lt;title&gt;</code> pertinent sur chaque page (nom de la page et nom du site). Chaque <code>&lt;title&gt;</code> doit être unique.</li><li>Ecrire un code HTML valide (cf. le validateur du W3C).</li><li>Structurer les listes avec les balises appropriées (<code>&lt;ul&gt;&lt;li&gt;</code> ou <code>&lt;ol&gt;&lt;li&gt;</code>).</li><li>Structurer les citations avec les balises <code>&lt;blockquote&gt;</code> ou <code>&lt;q&gt;</code>.</li></ul><h2 id="images" tabindex="-1">Images <a class="header-anchor" href="#images" aria-label="Permalink to &quot;Images&quot;">​</a></h2><ul><li>Se demander si l&#39;image est informative, décorative ou image-lien.</li><li>Pour les images intégrées avec des balises <code>&lt;img&gt;</code>: <ul><li>Décorative : <code>&lt;img alt=&quot;&quot;&gt;</code></li><li>Informative : <code>&lt;img alt=&quot;Information contenue dans l&#39;image&quot;&gt;</code></li><li>Image-lien : <code>&lt;img alt=&quot;Destination du lien&quot;&gt;</code></li></ul></li><li>Pour les images intégrées avec des balises <code>&lt;svg&gt;</code> : <ul><li>Décorative : <code>&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot;&gt;&lt;/svg&gt;</code></li><li>Informative : <code>&lt;svg aria-label=&quot;Information contenue dans l&#39;image&quot; role=&quot;img&quot; &gt;&lt;/svg&gt;</code></li><li>Image-lien : <code>&lt;svg aria-label=&quot;Destination du lien&quot; role=&quot;img&quot; &gt;&lt;/svg&gt;</code></li></ul></li><li>Pour les images intégrées avec des polices d&#39;icones (<code>&lt;i&gt;</code>) : <ul><li>Décorative : <code>&lt;i aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code></li><li>Informative : <code>&lt;i aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;span class=&quot;sr-only&quot;&gt;Information contenue dans l&#39;icone&lt;/span&gt;</code></li><li>Image-lien : <code>&lt;i aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;span class=&quot;sr-only&quot;&gt;Destination du lien&lt;/span&gt;</code></li></ul></li></ul><p>Remarque : la classe <code>.sr-only</code> doit être créée si elle n&#39;existe pas encore dans le projet. Elle sert à masquer le texte visuellement tout en le laissant accessible aux lecteurs d&#39;écran. Dans certains projets, elle peut aussi s&#39;appeler <code>.assistive-text</code>, <code>.accessible-text</code>, <code>.visually-hidden</code>... Exemple de classe <code>.sr-only</code> : <a href="https://codepen.io/jeanne-a11y/pen/PodGYyd" target="_blank" rel="noreferrer">https://codepen.io/jeanne-a11y/pen/PodGYyd</a></p><ul><li>Pour les images qui ont besoin d&#39;une description détaillée (graphiques...) indiquer dans l&#39;alternative de l&#39;image une description courte et où trouver la description détaillée. Ajouter la description détaillée à proximité de l&#39;image sous une forme accessible (en texte HTML).</li><li>Pour les images légendées, utiliser les balises <code>&lt;figure&gt;</code> et <code>&lt;figcaption&gt;</code>.</li></ul><h2 id="navigation-liens-et-boutons" tabindex="-1">Navigation, liens et boutons <a class="header-anchor" href="#navigation-liens-et-boutons" aria-label="Permalink to &quot;Navigation, liens et boutons&quot;">​</a></h2><ul><li>Vérifier la présence de 2 moyens de navigation parmi les 3 possibles : <ul><li>Menu</li><li>Recherche globale</li><li>Plan du site</li></ul></li><li>Structurer chaque menu de navigation avec une balise <code>&lt;nav role=&quot;navigation&quot;&gt;</code> et ajouter un attribut <code>aria-label</code> pour donner un nom à chaque menu.</li><li>Structurer les menus dans des listes (<code>&lt;ul&gt;&lt;li&gt;</code>). Lorsqu&#39;il y a plusieurs niveaux, attention à bien imbriquer les listes.</li><li>Ajouter un attribut <code>aria-current=&quot;true&quot;</code> ou <code>aria-current=&quot;page&quot;</code> sur l&#39;élément courant dans le menu.</li><li>Les liens et les boutons doivent être explicites. Un intitulé trop générique ne permet pas de connaître la destination du lien (par exemple : &quot;Lire la suite&quot;, &quot;En savoir plus&quot;...). Pour rendre un lien explicite, utiliser l&#39;attribut <code>aria-label</code> (ou <code>title</code>). <strong>Cet attribut doit reprendre l&#39;intitulé visible du lien</strong>, puis le compléter. Exemple : <code>&lt;a href=&quot;#&quot; aria-label=&quot;En savoir plus : La migration des hirondelles&quot;&gt;En savoir plus&lt;/a&gt;</code></li><li>Bien faire la différence entre liens et boutons : <ul><li>Lien : navigation vers une autre page ou une zone de la page</li><li>Bouton : action dans la page</li></ul></li><li>Dans les liens de téléchargement de fichiers, c&#39;est une bonne pratique d&#39;indiquer le poids et le format du fichier.</li><li>Différencier visuellement les liens qui sont dans des paragraphes de texte grâce au soulignement.</li></ul><h2 id="navigation-au-clavier" tabindex="-1">Navigation au clavier <a class="header-anchor" href="#navigation-au-clavier" aria-label="Permalink to &quot;Navigation au clavier&quot;">​</a></h2><ul><li>S&#39;assurer de la visbilité du focus (en particulier, pas masquer l&#39;outline avec outline: none;).</li><li>Ne jamais utiliser de tabindex positifs.</li><li>S&#39;assurer qu&#39;il n&#39;y ait pas de piège au clavier.</li><li>Mettre en place un lien d&#39;évitement permettant d&#39;accéder directement à la zone de contenu principal. Ce lien doit être le premier élément tabulable dans la page.</li><li>S&#39;assurer que chaque élément interactif puisse être atteint et activé au clavier. Pour cela, penser à utiliser les balises appropriées (<code>&lt;a&gt;</code> ou <code>&lt;button&gt;</code>).</li><li>Faire en sorte que l&#39;ordre de tabulation soit logique (de haut en bas et de gauche à droite le plus souvent). Pour cela, il suffit de mettre les éléments dans le bon ordre dans le HTML.</li></ul><h2 id="polices-et-styles" tabindex="-1">Polices et styles <a class="header-anchor" href="#polices-et-styles" aria-label="Permalink to &quot;Polices et styles&quot;">​</a></h2><ul><li>S&#39;assurer que le site s&#39;affiche correctement jusqu&#39;à un zoom de 200%. Pour cela, utiliser notamment des unités relatives pour les tailles de textes et pour toutes les tailles en général (largeur, padding, margin, etc.)</li><li>S&#39;assurer que les textes puissent être espacés par les utilisateurs sans perte ou chevauchement de contenus. Pour cela, ne pas fixer la hauteur des blocs.</li><li>Lorsque c&#39;est possible, toujours préférer l&#39;intégration de texte en HTML / CSS plutôt que dans des images.</li><li>S&#39;assurer que les textes alternatifs des images restent lisibles quand les images ne s&#39;affichent pas.</li><li>Ne pas obliger l&#39;utilisateur à tourner son écran dans un sens ou dans l&#39;autre.</li><li>Ne pas faire porter de l&#39;information par les CSS (par exemple : une image de fond avec du texte). Vérifier qu&#39;il n&#39;y a pas de perte d&#39;information quand les CSS sont désactivés.</li><li>Le site doit être responsive. On doit pouvoir réduire la taille de l&#39;écran jusqu&#39;à 320px de large sans scroll horizontal. Ne pas supprimer de contenus en version mobile.</li></ul><h2 id="couleurs" tabindex="-1">Couleurs <a class="header-anchor" href="#couleurs" aria-label="Permalink to &quot;Couleurs&quot;">​</a></h2><ul><li>Vérifier les contrastes entre les textes et leur arrière-plan.</li><li>Vérifier les contrastes entre les éléments graphiques porteurs d&#39;information et leur arrière-plan.</li><li>Vérifier les contrastes entre les élément d&#39;interface et leur arrière-plan (exemple : les bordures d&#39;un champ).</li><li>L&#39;information ne doit pas être portée uniquement par la couleur.</li></ul><h2 id="formulaires" tabindex="-1">Formulaires <a class="header-anchor" href="#formulaires" aria-label="Permalink to &quot;Formulaires&quot;">​</a></h2><ul><li>Relier chaque champ à son étiquette avec les attriuts <code>for=&quot;&quot;</code> et <code>id=&quot;&quot;</code>.</li><li>Positionner les étiquettes à proximité des champs de formulaire.</li><li>Dans des cas très rares, un champ peut ne pas avoir d&#39;étiquette visible (par exemple : champ de recherche). Dans ce cas, utiliser <code>title=&quot;&quot;</code> pour lui donner une étiquette.</li><li>Utiliser <code>&lt;fieldset&gt;</code> pour regrouper : <ul><li>Les boutons radio</li><li>Les checkbox</li><li>Les champs qui se répètent (par exemple : adresse de livraison / adresse de facturation, participant 1 / participant 2...)</li></ul></li><li>Dans chaque <code>&lt;fieldset&gt;</code>, prévoir une balise <code>&lt;legend&gt;</code> (premier enfant direct du <code>&lt;fieldset&gt;</code>).</li><li>Ajouter des attributs <code>autocomplete</code> pour tous les champs qui contiennent des données personnelles (voir la liste : <a href="https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/autocomplete" target="_blank" rel="noreferrer">https://developer.mozilla.org/fr/docs/Web/HTML/Attributes/autocomplete</a>)</li><li>Pour les champs obligatoires : <ul><li>Ajouter <code>required</code> ou <code>aria-required=&quot;true&quot;</code> sur la balise <code>&lt;input&gt;</code> (ou <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>...)</li><li>Ajouter une indication visuelle dans l&#39;étiquette du champ. Si c&#39;est une astérisque, ajouter une phrase explicative au début du formulaire.</li></ul></li><li>Pour les champs qui ont un format spécifique à respecter : <ul><li>Indiquer le format attendu soit dans la balise <code>&lt;label&gt;</code>, soit dans un texte relié au champ avec <code>aria-describedby</code>.</li></ul></li><li>Pour les champs en erreur : <ul><li>Ajouter <code>aria-invalid=&quot;true&quot;</code> sur la balise <code>&lt;input&gt;</code> (ou <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>...)</li><li>Indiquer dans chaque message d&#39;erreur la cause de l&#39;erreur, le nom du champ en erreur, et si besoin redonner le format et/ou un exemple de valeur attendue.</li><li>Relier le message d&#39;erreur au champ correspondant avec <code>aria-describedby</code>. Il est possible de mettre plusieurs id dans le même attribut <code>aria-describedby</code>, on peut donc y mettre l&#39;id du message d&#39;erreur et de l&#39;indication de format.</li></ul></li><li>Ne pas utiliser <code>placeholder=&quot;&quot;</code> pour donner des informations (ni étiquette de champ, ni format attendu).</li></ul><h2 id="tableaux" tabindex="-1">Tableaux <a class="header-anchor" href="#tableaux" aria-label="Permalink to &quot;Tableaux&quot;">​</a></h2><ul><li>Se demander si le tableau est un tableau de données ou un tableau de mise en forme.</li><li>Tableau de mise en forme : <ul><li><code>&lt;table role=&quot;presentation&quot;&gt;</code></li><li>Ne pas utiliser de balises <code>&lt;thead&gt;</code>, <code>&lt;th&gt;</code> et d&#39;attributs <code>scope=&quot;&quot;</code></li></ul></li><li>Tableaux de données : <ul><li><code>&lt;th scope=&quot;row&quot;&gt;</code> pour les en-têtes de lignes</li><li><code>&lt;th scope=&quot;col&quot;&gt;</code> pour les en-têtes de colonnes</li><li>Si le tableau a un titre, le mettre dans une balise <code>&lt;caption&gt;</code></li></ul></li><li>Tableaux de données complexes : <ul><li>A éviter, essayer de simplifier pour obtenir des tableaux de données simples.</li><li>Sinon, utiliser la technique des <code>headers=&quot;&quot;</code> et des <code>id=&quot;&quot;</code>.</li></ul></li></ul><h2 id="videos" tabindex="-1">Vidéos <a class="header-anchor" href="#videos" aria-label="Permalink to &quot;Vidéos&quot;">​</a></h2><ul><li>Un texte (titre ou court paragraphe) doit introduire la vidéo et permettre de comprendre de quoi elle parle.</li><li>La vidéo doit disposer de : <ul><li>Sous-titres (si nécessaire).</li><li>Audiodescription (si nécessaire).</li><li>Transcription textuelle (si nécessaire).</li></ul></li><li>Le player doit fonctionner au clavier et avec un lecteur d&#39;écran.</li><li>Il doit être possible de contrôler la lecture et le son.</li></ul><h2 id="aria-et-composants-d-interface-riche" tabindex="-1">ARIA et composants d&#39;interface riche <a class="header-anchor" href="#aria-et-composants-d-interface-riche" aria-label="Permalink to &quot;ARIA et composants d&#39;interface riche&quot;">​</a></h2><ul><li>Règle n°1 : ne pas utiliser ARIA.</li><li>Les attributs <code>role=&quot;&quot;</code> servent à changer la sémantique de base d&#39;un élément HTML. On les utilise principalement pour ajouter de la sémantique quand l&#39;élément HTML n&#39;existe pas. (Exemple : <code>role=&quot;tab&quot;</code>).</li><li>Les attributs <code>aria-*</code> apportent des informations supplémentaires sur les éléments, qui ne sont pas disponibles en HTML (exemple : champ invalide, panneau déplié...)</li><li>ARIA ne change QUE la sémantique, pas le comportement ni l&#39;apparence d&#39;un élément.</li><li>Les éléments non visibles à l&#39;écran doivent être masqués avec <code>visibility: hidden;</code> ou <code>display: none;</code></li><li>Pour les composants d&#39;interface riche, il existe des &quot;recettes&quot; pour rendre ces composants accesibles grâce à ARIA. Ces recettes définissent : <ul><li>Les attributs ARIA à utiliser, et les valeurs à leur donner selon l&#39;état du composant.</li><li>Les comportements attendus au clavier et avec un lecteur d&#39;écran.</li></ul></li><li>Ces recettes nécessitent d&#39;utiliser du Javascript. Elles doivent être suivies pour s&#39;assurer de l&#39;accessibilité des composants.</li></ul>',23),o=[s];function r(n,u,d,c,p,m){return i(),t("div",null,o)}const b=e(a,[["render",r]]);export{q as __pageData,b as default};

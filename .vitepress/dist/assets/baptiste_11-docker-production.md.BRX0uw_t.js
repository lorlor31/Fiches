import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.TebtTzPX.js";const u=JSON.parse('{"title":"Docker : environnement de production","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/11-docker-production.md","filePath":"baptiste/11-docker-production.md"}'),e={name:"baptiste/11-docker-production.md"},l=n(`<h1 id="docker-environnement-de-production" tabindex="-1">Docker : environnement de production <a class="header-anchor" href="#docker-environnement-de-production" aria-label="Permalink to &quot;Docker : environnement de production&quot;">‚Äã</a></h1><p>Maintenant qu&#39;on a d√©couvert Docker et vu qu&#39;on pouvait s&#39;en servir pour monter un environnement de d√©veloppement, se pose la question : peut-on utiliser Docker en production ?</p><p>Et la r√©ponse est oui !</p><p>Dans ce fichier Markdown nous allons installer Docker sur notre VM Serveur Kourou, puis faire quelques ajustements √† notre fichier <code>compose.yaml</code>.</p><h2 id="installation-de-docker" tabindex="-1">Installation de Docker <a class="header-anchor" href="#installation-de-docker" aria-label="Permalink to &quot;Installation de Docker&quot;">‚Äã</a></h2><p>Si vous n&#39;avez pas encore install√© Docker sur votre VM Serveur Kourou, suivez les instructions du fichier <a href="./05-docker-install.html">05-docker-install.md</a> !</p><h2 id="compose-yaml-pour-la-production" tabindex="-1">compose.yaml pour la production <a class="header-anchor" href="#compose-yaml-pour-la-production" aria-label="Permalink to &quot;compose.yaml pour la production&quot;">‚Äã</a></h2><p>Nous allons avoir plusieurs ajustements √† faire dans notre fichier <code>compose.yaml</code> pour qu&#39;il soit adapt√© √† une utilisation en production :</p><ul><li>ce fichier contient des informations sensibles, notamment le mot de passe de la base de donn√©es. Or, il est commit√© sur notre d√©p√¥t Github ...</li><li>on utilise une image h√©berg√©e sur le DockerHub pour le backend : c&#39;est peut-√™tre quelque-chose qu&#39;on voudra √©viter.</li><li>√† l&#39;inverse, le code du frontend n&#39;est pas h√©berg√© sur DockerHub mais mont√© dans le conteneur via un bind mount. Ceci implique que nous devrons livrer le code du frontend avec le fichier <code>compose.yaml</code>.</li><li>persistance des donn√©es : actuellement, quand on stoppe et qu&#39;on relance les conteneurs, la base de donn√©es est r√©initialis√©e ! üò±</li><li>red√©marrer les conteneurs en cas d&#39;erreur : actuellement, si un conteneur plante, il faut le relancer √† la main !</li></ul><h3 id="informations-sensibles" tabindex="-1">Informations sensibles <a class="header-anchor" href="#informations-sensibles" aria-label="Permalink to &quot;Informations sensibles&quot;">‚Äã</a></h3><p>Pour √©viter de mettre nos mots de passe directement dans le fichier <code>compose.yaml</code>, on peut cr√©er un fichier <code>.env</code> ! Ce fichier doit √™tre √† la racine du d√©p√¥t, et voici son contenu :</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_HOST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=db</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=pomodoro</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_USERNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=pomodoro</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MARIADB_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=pomodoro</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MARIADB_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=pomodoro</span></span></code></pre></div><p>Cr√©eons √©galement un fichier <code>.env.example</code> qui servira d&#39;exemple.</p><p>Nous pouvons maintenant modifier notre fichier <code>compose.yaml</code> pour qu&#39;il lise le mot de passe depuis le fichier <code>.env</code> !</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  frontend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">httpd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8000:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./front</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/apache2/htdocs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bdelphin/pomodoro-backend-laravel</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./DB.sql:/docker-entrypoint-initdb.d/DB.sql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span></code></pre></div><p>Il ne reste plus qu&#39;√† ajouter un fichier <code>.gitignore</code> √† la racine du d√©p√¥t avec comme contenu :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.env</span></span></code></pre></div><h3 id="se-passer-de-dockerhub" tabindex="-1">Se passer de DockerHub <a class="header-anchor" href="#se-passer-de-dockerhub" aria-label="Permalink to &quot;Se passer de DockerHub&quot;">‚Äã</a></h3><p>Actuellement, l&#39;image du backend est publi√©e sur le Dockerhub. Les registres d&#39;images tel que le Dockerhub sont tr√®s pratiques (ils nous permettent d&#39;h√©berger nos images Docker personnalis√©es), mais dans certains cas on peut vouloir √©viter de publier notre code / nos images sur internet.</p><p>Bonne nouvelle, on peut facilement se passer du Dockerhub !</p><p>Vu qu&#39;on ne pourra plus h√©berger d&#39;image compil√©e en local, on va <strong>compiler nos images directement sur le serveur de production, au lancement des conteneurs</strong> !</p><p>Pour cela, on peut utiliser l&#39;instruction <code>build</code> dans notre fichier <code>compose.yaml</code> :</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  frontend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">httpd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8000:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./front</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/apache2/htdocs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./back</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./DB.sql:/docker-entrypoint-initdb.d/DB.sql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span></code></pre></div><p>‚ö†Ô∏è Cette solution impose de livrer le code du backend (dans le dossier <code>back</code>) en m√™me temps que le fichier <code>compose.yaml</code>.</p><h3 id="persistance-des-donnees" tabindex="-1">Persistance des donn√©es <a class="header-anchor" href="#persistance-des-donnees" aria-label="Permalink to &quot;Persistance des donn√©es&quot;">‚Äã</a></h3><p>Une fois notre application en production, les donn√©es de la base de donn√©es deviennent tr√®s pr√©cieuses : on ne peut pas se permettre de les perdre !</p><p>Or actuellement, quand on stoppe (avec la commande <code>docker compose down</code>) et qu&#39;on relance les conteneurs, les t√¢ches qu&#39;on a ajout√© ont disparu üò± √áa veut donc dire qu&#39;√† la moindre interruption du serveur (panne de courant, crash du Docker Engine, etc.) on perdra toutes les donn√©es de notre application !</p><p>C&#39;est tout √† fait normal : les images Docker √©tant des fichiers immuables, on ne peut pas stocker notre BDD √† l&#39;int√©rieur de l&#39;image, les donn√©es qu&#39;on y ajoute n&#39;existent actuellement que dans le conteneur lanc√©, l&#39;instance de cette image.</p><p>Pour √©viter √ßa, on va devoir <strong>monter un volume Docker</strong> √† l&#39;int√©rieur du conteneur. Un volume fonctionne un peu comme un <strong>bind mount</strong>, la diff√©rence est qu&#39;on ne choisit par quel dossier sur notre h√¥te on souhaite monter dans le conteneur, c&#39;est Docker qui g√®re !</p><p><img src="https://docs.docker.com/storage/images/types-of-mounts-volume.webp" alt="difference volumes bind mounts"></p><p>Cette image provient de la <a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noreferrer">documentation officielle Docker</a> : on peut y voir que comme pour les bind mounts, les volumes seront stock√©s dans le syst√®me de fichiers de l&#39;ordinateur h√¥te (notre PC, ou le serveur si on est en production). Les volumes seront stock√©s dans un dossier sp√©cifique (nomm√© <code>Docker area</code> sur ce sch√©ma), contraiement aux bind mounts (pour lesquels on sp√©cifie quel dossier on veut monter).</p><p>Avec la commande <code>docker run</code>, on utilise l&#39;argument <code>-v</code> pour monter un volume dans un conteneur :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mon-super-volume:/chemin/dans/le/conteneur</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image:tag</span></span></code></pre></div><p>Au lancement, si le volume n&#39;existe pas encore, il sera automatiquement cr√©√© par Docker. On peut √©galement cr√©er les volumes en amont avec la commande <code>docker volume create mon-super-volume</code>.</p><p>Dans notre cas, on utilise Docker Compose. La syntaxe est tr√®s similaire √† celle utilis√©e pour les <strong>bind mounts</strong> :</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  frontend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">httpd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8000:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./front</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/apache2/htdocs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./back</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./DB.sql:/docker-entrypoint-initdb.d/DB.sql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pomodoro-db:/var/lib/mysql:Z</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pomodoro-db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>Avec ce <code>compose.yaml</code>, notre BDD sera stock√©e sur l&#39;h√¥te dans un volume Docker nomm√© <code>pomodoro-db</code>.</p><p>‚ö†Ô∏è Il faut √©galement ajouter 2 lignes suppl√©mentaire √† la fichier du fichier <code>compose.yaml</code> :</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pomodoro-db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>üí° Si on avait besoin de plusieurs volumes Docker, ils devraient tous √™tre list√©s sous la section <code>volumes:</code> √† la fin du <code>compose.yaml</code>.</p><p>Essayez de relancer les conteneurs, d&#39;ajouter des t√¢ches, puis de stopper &amp; relancer √† nouveau les conteneurs. Si vous n&#39;avez pas fait d&#39;erreur, les donn√©es devraient maintenant persister üéâ</p><p>Pour lister les volumes Docker existants, lancez la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p>Vous devriez avoir au moins deux volumes :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DRIVER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    VOLUME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAME</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     b14a4b287bee0d5e257c1dab7d1ac8fde1d98f7a61f32610cf341a9717477007</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     s08-php-pomodor-o_pomodoro-db</span></span></code></pre></div><p>Le premier volume a un nom al√©atoirement attribu√© par Docker, et correspond au volume cr√©√© par d√©faut par MariaDB. Le deuxi√®me volume est celui qu&#39;on vient de cr√©er.</p><p>√Ä retenir : les volumes Docker sont stock√©s <strong>sur le syst√®me de fichiers de l&#39;h√¥te</strong>, ce qui permet donc de faire persister notre BDD m√™me apr√®s l&#39;arr√™t / la suppression d&#39;un conteneur.</p><h3 id="relancer-automatiquement-les-conteneurs" tabindex="-1">Relancer automatiquement les conteneurs <a class="header-anchor" href="#relancer-automatiquement-les-conteneurs" aria-label="Permalink to &quot;Relancer automatiquement les conteneurs&quot;">‚Äã</a></h3><p>En production, la <strong>disponibilit√©</strong> de notre application est tr√®s importante : on veut qu&#39;elle soit accessible par nos visiteurs √† n&#39;importe quel moment, on vise une disponibilit√© de 100% (24h/24, 7jours/7).</p><p>Nos conteneurs peuvent parfois rencontrer un bug, et se stopper. Dans notre configuration actuelle, il faudrait qu&#39;on se connecte au serveur pour relancer le conteneur stopp√© √† la main : pas g√©nial.</p><p>Pour √©viter ce probl√®me, on peut ajouter l&#39;instruction <code>restart: always</code> sur tous nos services :</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  frontend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">httpd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8000:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bind</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./front</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/usr/local/apache2/htdocs</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./back</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./DB.sql:/docker-entrypoint-initdb.d/DB.sql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pomodoro-db:/var/lib/mysql:Z</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pomodoro-db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>De cette fa√ßon, en cas de crash d&#39;un conteneur, il sera automatiquement relanc√©.</p><h2 id="aller-plus-loin-orchestration-de-conteneurs-ci-cd" tabindex="-1">Aller plus loin : orchestration de conteneurs &amp; CI/CD <a class="header-anchor" href="#aller-plus-loin-orchestration-de-conteneurs-ci-cd" aria-label="Permalink to &quot;Aller plus loin : orchestration de conteneurs &amp; CI/CD&quot;">‚Äã</a></h2><p>On vient de le voir, avec quelques ajustements √† notre fichier <code>compose.yaml</code>, Docker Compose est parfaitement adapt√© √† une utilisation en production.</p><p>Cela-dit, il existe des probl√©matiques auxquelles Docker seul ne peut pas r√©pondre (liste non exhaustive) :</p><ul><li>comment d√©ployer automatiquement notre application ?</li><li>comment s&#39;assurer que les ressources mat√©rielles de notre serveur sont suffisantes ?</li><li>comment surveiller la sant√© de notre application ?</li></ul><p>Et surtout ... comment d√©ployer notre application sur un cluster de plusieurs machines ?</p><p>Il est donc fr√©quent d&#39;utiliser un <strong>orchestrateur de conteneurs</strong>, logiciel sp√©cialement pens√© pour adresser ces probl√©matiques rencontr√©es en production.</p><p>On en parle un peu dans le <a href="./12-orchestration.html">dernier fichier Markdown</a>, et on ouvre √©galement sur les pratiques DevOps : l&#39;int√©gration continue (CI) et le d√©ploiement continu (CD).</p>`,60),t=[l];function p(h,r,k,o,d,c){return a(),i("div",null,t)}const g=s(e,[["render",p]]);export{u as __pageData,g as default};

import{_ as s,c as e,o as i,a2 as a}from"./chunks/framework.BXMoTSpH.js";const g=JSON.parse('{"title":"Orchestration de conteneurs","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/12-orchestration.md","filePath":"baptiste/12-orchestration.md"}'),n={name:"baptiste/12-orchestration.md"},t=a(`<h1 id="orchestration-de-conteneurs" tabindex="-1">Orchestration de conteneurs <a class="header-anchor" href="#orchestration-de-conteneurs" aria-label="Permalink to &quot;Orchestration de conteneurs&quot;">‚Äã</a></h1><p>On l&#39;a vu pr√©cedemment, Docker peut tout √† fait √™tre utilis√© en production.</p><p>Cela-dit, il existe des probl√©matiques auxquelles Docker Compose seul ne peut pas r√©pondre (liste non exhaustive) :</p><ul><li>comment d√©ployer automatiquement notre application ?</li><li>comment s&#39;assurer que les ressources mat√©rielles de notre serveur sont suffisantes ?</li><li>comment surveiller la sant√© de notre application ?</li><li>comment d√©ployer notre application sur un cluster de plusieurs machines ?</li></ul><p>Pour adresser ces probl√©matiques rencontr√©es en production, on utilise un <strong>orchestrateur de conteneurs</strong>. Le plus connu s&#39;appelle <strong>Kubernetes</strong>. Docker propose √©galement son propre orchestrateur, <strong>Docker Swarm</strong>.</p><p>Nous allons d√©couvrir tr√®s rapidement le fonctionnement de Docker Swarm, un peu plus simple √† appr√©hender que Kubernetes (mais moins puissant).</p><h2 id="docker-swarm" tabindex="-1">Docker Swarm <a class="header-anchor" href="#docker-swarm" aria-label="Permalink to &quot;Docker Swarm&quot;">‚Äã</a></h2><p>Docker Swarm, comme Kubernetes, est pens√© pour fonctionner sur un cluster (une grappe, un groupe) de plusieurs serveurs Linux.</p><p>Pour disposer rapidement (et gratuitement !) de plusieurs serveurs virtuels Linux, avec Docker pr√©-install√©, on peut utiliser la plateforme <a href="https://labs.play-with-docker.com/" target="_blank" rel="noreferrer">Play-With-Docker</a>.</p><p>‚ö†Ô∏è Ne lancez pas tous des instances en m√™me temps, on va saturer la plateforme !</p><h3 id="premiere-instance-le-manager" tabindex="-1">Premi√®re instance : le &quot;manager&quot; <a class="header-anchor" href="#premiere-instance-le-manager" aria-label="Permalink to &quot;Premi√®re instance : le &quot;manager&quot;&quot;">‚Äã</a></h3><p>Un cluster Docker Swarm (aussi appel√© un &quot;swarm&quot;) doit obligatoirement comporter une machine dite &quot;manager&quot;.</p><p>Sur une premi√®re instance Play-With-Docker (ou sur un premier serveur), on lance la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swarm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --advertise-addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MANAGER-I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>En rempla√ßant <code>&lt;MANAGER-IP&gt;</code> par l&#39;adresse IP de l&#39;instance, par exemple :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swarm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --advertise-addr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.0.13</span></span></code></pre></div><p>Docker va nous indiquer que le swarm a √©t√© initialis√© et que la machine courante en est maintenant le manager.</p><p>üí° Copiez la commande qui s&#39;affiche, nous en aurons besoin sur les autres instances.</p><h3 id="instances-supplementaires" tabindex="-1">Instances suppl√©mentaires <a class="header-anchor" href="#instances-supplementaires" aria-label="Permalink to &quot;Instances suppl√©mentaires&quot;">‚Äã</a></h3><p>Sur une deuxi√®me instance PWD, lancez la commande copi√©e pr√©c√©demment, elle doit ressembler √† :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swarm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SWMTKN-1-0he1t0otgzn04gt0zbnm9xacvuh6d4770nbbn9j121t6ch00y7-3xjzu53ophujk8ulfbc4kkpa9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.0.13:2377</span></span></code></pre></div><p>‚ö†Ô∏è Inutile de copier/coller la commande ci-dessus, le token et l&#39;adresse IP seront diff√©rents √† chaque fois !</p><p>Si tout s&#39;est bien pass√©, Docker va nous indiquer que la machine courante a rejoint le swarm en tant que <strong>worker</strong>.</p><h3 id="surveiller-l-etat-du-cluster" tabindex="-1">Surveiller l&#39;√©tat du cluster <a class="header-anchor" href="#surveiller-l-etat-du-cluster" aria-label="Permalink to &quot;Surveiller l&#39;√©tat du cluster&quot;">‚Äã</a></h3><p>Retournons sur le manager et lan√ßons la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p>On peut voir la liste des machines qui ont rejoint le cluster, leur √©tat, la version du Docker Engine, etc.</p><p>La commande <code>docker info</code> donne √©galement des informations sur l&#39;√©tat du cluster Docker Swarm.</p><h3 id="service-docker" tabindex="-1">Service Docker <a class="header-anchor" href="#service-docker" aria-label="Permalink to &quot;Service Docker&quot;">‚Äã</a></h3><p>Maintenant que notre cluster est d√©marr√©, on va pouvoir lancer nos applications. La premi√®re fa√ßon de lancer une application sur le conteneur est d&#39;utiliser un <strong>service Docker</strong>.</p><p>Un service est un peu comme un conteneur lanc√© avec <code>docker run</code> : les services permettent de d√©marrer un ou plusieurs conteneurs √† partir d&#39;une image Docker sur un cluster Docker Swarm.</p><p>Pour lancer 4 instances (4 &quot;r√©pliques&quot;) d&#39;une image Docker sur le cluster, on utilise la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --replicas</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 80:80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bdelphin/simple_php-gethostname</span></span></code></pre></div><p>On peut ensuite v√©rifier sur chaque machine combien de conteneurs Docker ont √©t√© d√©marr√©s avec la commande <code>docker ps</code>. Normalement, on devrait avoir 2 conteneurs par machine.</p><p>On peut voir les services en cours avec la commande <code>docker service ls</code>.</p><p>Pour voir tous les conteneurs et leur status, on doit utiliser la commande <code>docker service ps &lt;id_service&gt;</code>.</p><p>On peut stopper l&#39;ex√©cution du service avec <code>docker service rm &lt;id_service&gt;</code>.</p><h3 id="stack-docker" tabindex="-1">Stack Docker <a class="header-anchor" href="#stack-docker" aria-label="Permalink to &quot;Stack Docker&quot;">‚Äã</a></h3><p>Un service Docker permet de lancer un ou plusieurs conteneurs √† partir d&#39;une image. Pour les applications multi-conteneurs Docker Compose, on va plut√¥t utiliser un <strong>stack Docker</strong>.</p><p>Pour cr√©er/d√©ployer un nouveau stack Docker, on utilise la commande :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose.yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nom_stac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Testons avec notre appli Pomodor&#39;O !</p><p>‚ö†Ô∏è Attention ! On ne peut pas utiliser l&#39;instruction <code>build: ./back</code> que nous avions ajout√© au fichier <code>compose.yaml</code> avec docker stack. Nous allons donc r√©utiliser pour cette d√©monstration l&#39;image h√©berg√©e sur le DockerHub, en rempla√ßant cette instruction par <code>image: PSEUDODH/pomodoro-backend-laravel</code></p><p>On doit d&#39;abord envoyer notre appli sur le serveur. Pour √©viter d&#39;avoir √† faire la configuration SSH pour git, on va utiliser SCP. Depuis notre machine :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro.zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S08-PHP-Pomodor-O-PSEUDOGH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro.zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip172-18-0-64-clni5lcsnmng008p6acg@direct.labs.play-with-docker.com:~/pomodoro.zip</span></span></code></pre></div><p>Puis sur PWD :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro.zip</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S08-PHP-Pomodor-O-PSEUDOGH</span></span></code></pre></div><p>Et enfin, pour d√©marrer le stack :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomorodo</span></span></code></pre></div><p>La connexion √† l&#39;API ne fonctionne pas, vu qu&#39;on a pas mis √† jour la variable d&#39;environnement <code>baseAPIURL</code> dans le fichier <code>settings.js</code>, mais on peut voir que le backend et le frontend sont op√©rationnels.</p><p>On peut m√™me essayer de lancer des requ√™tes de test depuis Insomnia pour v√©rifier que tout est OK.</p><p>Quelques commandes pour monitorer l&#39;√©tat du Stack :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro</span></span></code></pre></div><p>On peut ensuite augmenter le nombre de r√©plicas d&#39;un service, pour supporter la mont√©e en charge de notre application :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scale</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro_backend=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pomodoro</span></span></code></pre></div><h2 id="portainer" tabindex="-1">Portainer <a class="header-anchor" href="#portainer" aria-label="Permalink to &quot;Portainer&quot;">‚Äã</a></h2><p>Portainer est une interface graphique pour Docker. Elle permet de g√©rer facilement un cluster Docker Swarm.</p><p>Pour l&#39;installer, on va suivre la documentation officielle :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://downloads.portainer.io/ce2-19/portainer-agent-stack.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer-agent-stack.yml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer-agent-stack.yml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer</span></span></code></pre></div><p>On peut ensuite acc√©der √† l&#39;interface graphique sur le port 9000 de l&#39;instance manager, cr√©er un mot de passe et commencer √† d√©couvrir l&#39;interface.</p><h3 id="deployer-une-application-avec-portainer" tabindex="-1">D√©ployer une application avec Portainer <a class="header-anchor" href="#deployer-une-application-avec-portainer" aria-label="Permalink to &quot;D√©ployer une application avec Portainer&quot;">‚Äã</a></h3><p>On peut √©galement d√©ployer une application avec Portainer. Pour cela, on va cr√©er un nouveau stack, en important le fichier <code>compose.yaml</code> de notre application.</p><p>Pour simplifier les choses, on ne va d√©ployer que le backend et la base de donn√©es, on va donc supprimer le service <code>frontend</code> du fichier <code>compose.yaml</code>. Pour la base de donn√©es, on va utiliser une image pr√©-construite, on va donc modifier le service <code>db</code> du fichier <code>compose.yaml</code>. Le <code>Dockerfile</code> ayant servi √† la construction de cette image est le suivant :</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mariadb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MARIADB_ROOT_PASSWORD=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pomodoroooooo&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MARIADB_DATABASE=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pomodoro&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./DB.sql /docker-entrypoint-initdb.d/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3306</span></span></code></pre></div><p>On charge √©galement le fichier <code>.env</code> pour que les variables d&#39;environnement soient bien prises en compte. Si la connexion √† la BDD √©choue, il faut sp√©cifier les variables d&#39;environnement directement dans le service depuis Portainer, apr√®s le d√©marrage du stack.</p><p>Voici le fichier <code>compose.yaml</code> final :</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bdelphin/pomodoro-backend-laravel</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bdelphin/pomodoro-bdd-mariadb</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pomodoro-db:/var/lib/mysql:Z</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pomodoro-db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div>`,67),p=[t];function l(r,o,h,c,d,k){return i(),e("div",null,p)}const m=s(n,[["render",l]]);export{g as __pageData,m as default};

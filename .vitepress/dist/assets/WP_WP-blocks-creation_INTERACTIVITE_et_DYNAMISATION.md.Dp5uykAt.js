import{_ as s,c as i,o as e,a2 as a}from"./chunks/framework.TebtTzPX.js";const E=JSON.parse('{"title":"INTERACTIVTE DU BLOC (JS) et DYNAMISATION (PHP)","description":"","frontmatter":{},"headers":[],"relativePath":"WP/WP-blocks-creation/INTERACTIVITE_et_DYNAMISATION.md","filePath":"WP/WP-blocks-creation/INTERACTIVITE_et_DYNAMISATION.md"}'),t={name:"WP/WP-blocks-creation/INTERACTIVITE_et_DYNAMISATION.md"},n=a(`<h1 id="interactivte-du-bloc-js-et-dynamisation-php" tabindex="-1">INTERACTIVTE DU BLOC (JS) et DYNAMISATION (PHP) <a class="header-anchor" href="#interactivte-du-bloc-js-et-dynamisation-php" aria-label="Permalink to &quot;INTERACTIVTE DU BLOC (JS) et DYNAMISATION (PHP)&quot;">​</a></h1><h2 id="interactivite-ajouter-des-eventlisteners-et-des-callbacks-dans-edit-js-et-viewscript" tabindex="-1">INTERACTIVITE Ajouter des eventListeners et des callbacks dans edit.js et viewScript <a class="header-anchor" href="#interactivite-ajouter-des-eventlisteners-et-des-callbacks-dans-edit-js-et-viewscript" aria-label="Permalink to &quot;INTERACTIVITE Ajouter des eventListeners et des callbacks dans edit.js et viewScript&quot;">​</a></h2><pre><code>- Pour rendre le bloc interactif, on va rajouter du JS dans la fonction edit dans edit.js pour l&#39;interaction côté éditeur (cf exemple du bloc **slogan**)
- Pour l&#39;interaction côté frontend, il faut :
</code></pre><ol><li>définir un script dans block.json à la clé &quot;viewScript&quot;</li><li>Y mettre les fonctions</li><li>Attention à bien attribuer les classes nécessaires avec \`\`useBlockProps.save()\`pour écraser la classe par défaut</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useBlockProps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// permet de rajouter la class custom </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                className: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hover-text-block&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })}&gt;</span></span></code></pre></div><h2 id="dynamisation" tabindex="-1">DYNAMISATION <a class="header-anchor" href="#dynamisation" aria-label="Permalink to &quot;DYNAMISATION&quot;">​</a></h2><pre><code>Pour avoir des données dynamiques :
</code></pre><ol><li>Déclarer dans block.json le fichier php pour le rendu <code>&quot;render&quot;: &quot;file:./render.php&quot;</code></li><li>Dans edit.js on ne verra pas l&#39;id, on peut afficher une info</li><li>Dans save.js, on ne fera rien non plus comme le rendu sera géré par PHP</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useBlockProps } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@wordpress/block-editor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Rendu côté serveur uniquement.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Save;</span></span></code></pre></div><ol start="4"><li>Dans le fichier render.php, on va créer la fct qui va générer le bloc et l&#39;utiliser pour le rendu avec</li></ol><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register_block_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__DIR__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;render_callback&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;render_product_id_block&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><blockquote><p>J&#39;ai pas réussi avec la manière ci-dessus : écrire le PHP directement sans callback cf exemple du bloc slogan ou copyright</p></blockquote><h2 id="comment-utiliser-un-bloc-custom-dans-php" tabindex="-1">Comment utiliser un bloc custom dans PHP <a class="header-anchor" href="#comment-utiliser-un-bloc-custom-dans-php" aria-label="Permalink to &quot;Comment utiliser un bloc custom dans PHP&quot;">​</a></h2><blockquote><p>Préalable : bien déclarer les styles et assets du bloc ds <code>register_block_type()</code> ds le fichier du plugin avec <code>wp_enqueue_script</code> et <code>wp_enqueue_style</code> pour ne charger les assets que d le bloc est utilisé (+performant)</p></blockquote><p>Il y a plusieurs manières via un shortcode, via do_blocks, en utilisant la rendercallback du bloc...</p>`,15),l=[n];function r(p,h,o,c,d,k){return e(),i("div",null,l)}const g=s(t,[["render",r]]);export{E as __pageData,g as default};

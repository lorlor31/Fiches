import{_ as e,c as s,o as a,a2 as i}from"./chunks/framework.CEgrwLex.js";const g=JSON.parse(`{"title":"D√©ploiement d'une application Laravel","description":"","frontmatter":{},"headers":[],"relativePath":"baptiste/04-deploiement-app-laravel.md","filePath":"baptiste/04-deploiement-app-laravel.md"}`),n={name:"baptiste/04-deploiement-app-laravel.md"},t=i(`<h1 id="deploiement-d-une-application-laravel" tabindex="-1">D√©ploiement d&#39;une application Laravel <a class="header-anchor" href="#deploiement-d-une-application-laravel" aria-label="Permalink to &quot;D√©ploiement d&#39;une application Laravel&quot;">‚Äã</a></h1><p>Notre back-end a √©t√© r√©alis√© avec le framework Laravel. Quand on clone un projet Laravel, en production ou en d√©veloppement, on doit effectuer quelques actions pour que le projet fonctionne.</p><h2 id="installation-des-dependances" tabindex="-1">Installation des d√©pendances <a class="header-anchor" href="#installation-des-dependances" aria-label="Permalink to &quot;Installation des d√©pendances&quot;">‚Äã</a></h2><p>Il faut qu&#39;on installe les d√©pendances de notre projet avec <strong>Composer</strong>. Probl√®me, on ne l&#39;a pas encore install√© !</p><p>Pour installer Composer sur un serveur Ubuntu 22.04, on suit la <a href="https://getcomposer.org/download/" target="_blank" rel="noreferrer">doc officielle</a> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;copy(&#39;https://getcomposer.org/installer&#39;, &#39;composer-setup.php&#39;);&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;if (hash_file(&#39;sha384&#39;, &#39;composer-setup.php&#39;) === &#39;e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02&#39;) { echo &#39;Installer verified&#39;; } else { echo &#39;Installer corrupt&#39;; unlink(&#39;composer-setup.php&#39;); } echo PHP_EOL;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer-setup.php</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unlink(&#39;composer-setup.php&#39;);&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer.phar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/composer</span></span></code></pre></div><p>Une fois toutes ces commandes lanc√©es, Composer devrait √™tre install√©. Vous pouvez le v√©rifier avec la commande <code>composer --version</code> (vous devriez avoir <strong>au moins</strong> la version 2.0 de Composer).</p><p>On peut maintenant installer les d√©pendances de notre projet :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/www/html/S08-PHP-Pomodor-O-{{PSEUDO-GH}}/back/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><blockquote><p>Mais c&#39;est quoi cette erreur dans la console ? üò±</p></blockquote><p>Si on regarde attentivement le message d&#39;erreur (<code>Your Composer dependencies require a PHP version &quot;&gt;= 8.2.0&quot;. You are running 8.1.2-1ubuntu2.14.</code>), on peut voir que notre backend Laravel a √©t√© cod√© sur PHP 8.2.0 ... or sur notre serveur c&#39;est PHP 8.1.2 qui est install√© !</p><p>C&#39;est un probl√®me tr√®s courant : l&#39;environnement de d√©veloppement n&#39;est pas identique √† l&#39;environnement de production ! On d√©couvrira par la suite comment √©viter ce probl√®me, en utilisant des conteneurs Docker pour le d√©veloppement &amp; la production.</p><p>Mais en attendant, on va faire un petit ajustement dans le fichier <code>composer.json</code> pour que le backend fonctionne :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> composer.json</span></span></code></pre></div><p>√Ä la 8√®me ligne, remplacez <code>&quot;php&quot;: &quot;^8.2&quot;,</code> par <code>&quot;php&quot;: &quot;^8.1&quot;,</code>.</p><p>Comme d&#39;habitude, quittez <code>nano</code> et enregistrez les modifications en utilisant le raccourci clavier <code>Ctrl+X</code>, puis <code>Y</code> et <code>Entr√©e</code>.</p><p>Relancez l&#39;installation des d√©pendances :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>Plus de message d&#39;erreur üéâ</p><h2 id="configuration-des-variables-d-environnement" tabindex="-1">Configuration des variables d&#39;environnement <a class="header-anchor" href="#configuration-des-variables-d-environnement" aria-label="Permalink to &quot;Configuration des variables d&#39;environnement&quot;">‚Äã</a></h2><p>Notre backend Laravel a √©galement besoin d&#39;un fichier <code>.env</code>, dans lequel on va d√©finir plusieurs variables li√©es √† notre environnement de production, comme par exemple les identifiants de connexion √† la base de donn√©es.</p><p>Faites une copie du fichier <code>.env.example</code> avec la commande suivante :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>Puis modifions ce fichier avec <code>nano</code> :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><p>Configurez les variables d&#39;environnement de la base de donn√©es avec les valeurs suivantes :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_CONNECTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3306</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_DATABASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pomodoro</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_USERNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">explorateur</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DB_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ereul9Aeng</span></span></code></pre></div><p>Comme d&#39;habitude, quittez <code>nano</code> et enregistrez les modifications en utilisant le raccourci clavier <code>Ctrl+X</code>, puis <code>Y</code> et <code>Entr√©e</code>.</p><p>Avant de passer √† la suite, il nous reste une derni√®re variable d&#39;environnement √† configurer : la cl√© d&#39;application (<code>APP_KEY</code>) Laravel. On peut demander √† Laravel d&#39;en g√©n√©rer une avec la commande suivante :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key:generate</span></span></code></pre></div><h2 id="import-de-la-base-de-donnees" tabindex="-1">Import de la base de donn√©es <a class="header-anchor" href="#import-de-la-base-de-donnees" aria-label="Permalink to &quot;Import de la base de donn√©es&quot;">‚Äã</a></h2><p>Derni√®re √©tape : il faut qu&#39;on importe la base de donn√©es ! Un script <code>DB.sql</code> est disponible √† la racine du d√©p√¥t. On pourrait l&#39;importer via Adminer ou PHPMyAdmin, mais on peut aussi l&#39;importer avec la commande suivante :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> explorateur</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DB.sql</span></span></code></pre></div><p>üí° Utilisez le mot de passe habituel de l&#39;utilisateur explorateur : <code>Ereul9Aeng</code>. <strong>Attention, l√† encore les caract√®res du mot de passe n&#39;apparaissent pas pendant la saisie.</strong></p><h2 id="permissions" tabindex="-1">Permissions <a class="header-anchor" href="#permissions" aria-label="Permalink to &quot;Permissions&quot;">‚Äã</a></h2><p>√Ä ce stade, si vous vous rendez sur <a href="http://backend.PSEUDOGH-server.eddi.cloud/" target="_blank" rel="noreferrer">http://backend.PSEUDOGH-server.eddi.cloud/</a>, vous devriez avoir une erreur Laravel indiquant <code>The stream or file &quot;/var/www/html/S08-PHP-Pomodor-O/back/storage/logs/laravel.log&quot; could not be opened in append mode: Failed to open stream: Permission denied</code>.</p><p>Ce message d&#39;erreur nous indique que Laravel n&#39;a pas la permission (<code>Permission denied</code>) pour √©crire dasn son fichier de logs (<code>logs/laravel.log</code>). V√©rifions les droits dans le dossier !</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/www/html/S08-PHP-Pomodor-O-PSEUDOGH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alh</span></span></code></pre></div><p>On peut voir que sur le dossier <code>back</code>, seul l&#39;utilisateur <code>student</code> a les droits d&#39;√©criture (<code>drwxrwxr-x 12 student student 4.0K Oct 25 10:42 back</code>). Nous avions pourtant donn√© les droits d&#39;√©criture √©galement au groupe <code>www-data</code>, mais les permissions ont √©t√© modifi√©es quand on a clon√© le d√©p√¥t.</p><p>Relan√ßons la commande de l&#39;√©tape 1 :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> student:www-data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span></span></code></pre></div><p>Actualisez la page, l&#39;erreur Laravel devrait avoir disparue ! üéâ</p><h2 id="reecriture-d-url-htaccess" tabindex="-1">R√©√©criture d&#39;URL &amp; .htaccess <a class="header-anchor" href="#reecriture-d-url-htaccess" aria-label="Permalink to &quot;R√©√©criture d&#39;URL &amp; .htaccess&quot;">‚Äã</a></h2><p>Si vous essayez d&#39;acc√©der √† la route <code>/api/tasks</code> en GET sur notre backend depuis votre navigateur (<a href="http://backend.PSEUDOGH-server.eddi.cloud/api/tasks" target="_blank" rel="noreferrer">http://backend.PSEUDOGH-server.eddi.cloud/api/tasks</a>), vous allez avoir une erreur 404.</p><blockquote><p>Mais comment √ßa se fait, pourtant la route <code>/</code> fonctionne !</p></blockquote><p>Le probl√®me vient de la r√©ecriture d&#39;URL int√©gr√©e √† Laravel : pour qu&#39;elle fonctionne, on doit activer le module de r√©ecriture d&#39;Apache et modifier sa configuration pour qu&#39;il prenne en compte le fichier <code>.htaccess</code> dans le dossier <code>public</code>.</p><p>Lancez les deux commandes ci-dessous :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&lt;Directory \\/var\\/www\\/&gt;/,/&lt;\\/Directory&gt;/ s/AllowOverride None/AllowOverride all/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/apache2/apache2.conf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a2enmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rewrite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache2</span></span></code></pre></div><p>üí° La premi√®re commande utilise <code>sed</code> (un utilitaire permettant de faire des modifications dans des fichiers texte) pour remplacer la directive <code>AllowOverride None</code> par <code>AllowOverride all</code> dans le fichier de configuration d&#39;Apache <code>/etc/apache2/apache2.conf</code>.</p><p>üí° La deuxi√®me commande permet d&#39;activer le module de r√©√©criture d&#39;URL d&#39;Apache gr√¢ce √† l&#39;utilitaire <code>a2enmod</code> (Apache2 ENable MODule).</p><p>Si on essaye √† nouveau d&#39;acc√©der √† la route <code>/api/tasks</code>, nous ne devrions plus avoir d&#39;erreur 404.</p><h2 id="configuration-du-frontend" tabindex="-1">Configuration du frontend <a class="header-anchor" href="#configuration-du-frontend" aria-label="Permalink to &quot;Configuration du frontend&quot;">‚Äã</a></h2><p>Mais si on retourne sur le frontend (<a href="http://PSEUDOGH-server.eddi.cloud/" target="_blank" rel="noreferrer">http://PSEUDOGH-server.eddi.cloud/</a>), on a toujours le message d&#39;erreur <code>impossible de se connecter √† l&#39;API</code>. Pour que le front puisse se connecter au back, il faut qu&#39;on modifie une variable d&#39;environnement cot√© frontend :</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> front/assets/js/settings.js</span></span></code></pre></div><p>Remplacez la ligne <code>baseAPIURL: &quot;http://localhost:3000&quot;</code> par <code>baseAPIURL: &quot;http://backend.PSEUDOGH-server.eddi.cloud&quot;</code>.</p><p>Enregistrez les modifications et quittez <code>nano</code>, puis actualisez la page sur le frontend. √áa y est, nous n&#39;avons plus aucune erreur, notre application est officiellement en production üéâ</p>`,56),l=[t];function o(p,r,d,h,c,u){return a(),s("div",null,l)}const m=e(n,[["render",o]]);export{g as __pageData,m as default};
